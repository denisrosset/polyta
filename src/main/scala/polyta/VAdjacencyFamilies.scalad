package com.faacets
package polyta

import scala.{specialized => sp}

import spire.algebra._

import qalg.algebra._
import qalg.algos._

trait VAdjacencyFamily[V, @sp(Double, Long) A] {
  def vPolyhedron: SymVPolytope[V, A]
  def representativeZeroSet: Set[Int]
  def representative: LinearInequality[V, A]
  def representativeZeroSets: Seq[Set[Int]]
  def representatives: Seq[LinearInequality[V, A]]
}

final class VAdjacencyFamilyImpl[V, @sp(Double) A: Order](val vPolytope: VPolytope[V, A], val representativeZeroSet: Set[Int])(implicit alg: AlgVF[V, A]) extends VAdjacencyFamily[V, A] {
  implicit def A: Field[A] = alg.V.A


}

trait VAdjacencyFamilies[V, @sp(Double, Long) A] {
  def vPolyhedron: SymVPolyhedron[V, A]
  def vertexRepresentativeSets: Seq[Set[Int]]
  def representatives: Seq[VAdjacency[V, A]]
}

final class VAdjacenciesImpl[V, @sp(Double, Long) A: Order](val vPolyhedron: VPolyhedron[V, A], val vertexSets: Seq[Set[Int]])(implicit alg: AlgVF[V, A]) extends VAdjacencies[V, A] {
  def seq: Seq[VAdjacency[V, A]] = vertexSets.map(zs => VAdjacency(vPolyhedron, zs))
}
